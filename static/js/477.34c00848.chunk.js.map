{"version":3,"file":"static/js/477.34c00848.chunk.js","mappings":"wPAOaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,gQAaJE,GAAeF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,2D,IAKJA,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,6I,gICPZK,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,KAAMF,EAAAA,KAAaG,SAAS,mBAC5BC,OAAQJ,EAAAA,KAAaK,SAAS,gBAAgBF,SAAS,qBAG5CG,EAAc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC5B,OACE,SAAC,KAAD,CACEC,cAAe,CACbN,KAAM,GACNE,OAAQ,IAEVK,iBAAkBV,EAClBW,SAAU,SAACC,EAAQC,GACjBL,GAAM,kBAAKI,GAAN,IAAcE,IAAIC,EAAAA,EAAAA,SACvBF,EAAQG,WACT,EATH,SAWG,SAAAC,GACC,IAAMC,GAAeD,EAAML,OAAOT,MAAQc,EAAME,QAAQhB,KAClDiB,GAAiBH,EAAML,OAAOP,QAAUY,EAAME,QAAQd,OAE5D,OACE,UAACX,EAAD,YACE,SAAC,KAAD,CAAOS,KAAK,OAAZ,SACG,gBAAGkB,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaC,UAAWJ,EAAaK,YAAU,EAA/C,WACE,SAAC,IAAD,UAAW,UACX,UAAC,IAAD,YACE,SAAC,EAAAC,GAAD,kBACMH,GADN,IAEEI,YAAY,aACZC,iBAAiB,cAEnB,SAAC,IAAD,CAAkBC,cAAc,OAAhC,UACE,SAAC,IAAD,CAAMC,GAAIC,EAAAA,aAVjB,KAgBH,SAAChC,EAAD,CAAcM,KAAK,OAAO2B,UAAU,UACpC,SAAC,KAAD,CAAO3B,KAAK,SAAZ,SACG,gBAAGkB,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaC,UAAWF,EAAeG,YAAU,EAAjD,WACE,SAAC,IAAD,UAAW,YACX,UAAC,IAAD,YACE,SAAC,EAAAC,GAAD,kBACMH,GADN,IAEEK,iBAAiB,UACjBD,YAAY,eACZM,KAAK,UAEP,SAAC,IAAD,CAAkBJ,cAAc,OAAhC,UACE,SAAC,IAAD,CAAMC,GAAII,EAAAA,aAXjB,KAiBH,SAACnC,EAAD,CAAcM,KAAK,SAAS2B,UAAU,UACtC,SAAC,IAAD,CACEG,UAAU,SAAC,MAAD,IACVC,GAAI,EACJC,gBAAgB,UAChBC,YAAY,QACZL,KAAK,SALP,SAMC,kBAKN,GAGN,E,8BC3FYM,EAAO1C,EAAAA,GAAAA,GAAH,0MAWJ2C,EAAO3C,EAAAA,GAAAA,GAAH,4KASJ4C,EAAc5C,EAAAA,GAAAA,EAAH,oNAYX6C,EAAgB7C,EAAAA,GAAAA,KAAH,oN,wCC3BbE,GAAeF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,2DAKZD,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,oOAcJ8C,GAAQ9C,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,6I,mFCDZK,GAAaC,EAAAA,KAAaC,MAAM,CACpCC,KAAMF,EAAAA,KAAaG,SAAS,mBAC5BC,OAAQJ,EAAAA,KAAaG,SAAS,qBAGnBsC,GAAqB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC9CC,GAAWC,EAAAA,GAAAA,MAEjB,OACE,UAAC,KAAD,CACEC,qBAAqB,EACrBC,YAAU,EACVL,OAAQA,EACRC,QAASA,EACTK,aAAa,gBALf,WAOE,SAAC,IAAD,CAAcC,GAAG,OAAOC,eAAe,OAAOC,aAAa,SAC3D,UAAC,IAAD,CAAcC,EAAG,CAAEC,KAAM,QAASC,GAAI,SAAtC,WACE,SAAC,IAAD,CAAaC,EAAG,qBAAhB,SAAsC,kBACtC,SAAC,KAAD,KACA,SAAC,KAAD,CAAWA,EAAG,oBAAd,UACE,SAAC,KAAD,CACEhD,cAAe,CACbN,KAAMwC,EAAQxC,KACdE,OAAQsC,EAAQtC,QAElBK,iBAAkBV,GAClBW,SAAU,SAACC,EAAQC,GACjBiC,GACEY,EAAAA,GAAAA,IAAY,CACV5C,GAAI6B,EAAQ7B,GACZX,KAAMS,EAAOT,KACbE,OAAQO,EAAOP,UAGnBQ,EAAQG,WACT,EAfH,SAiBG,SAAAC,GACC,IAAMC,GAAeD,EAAML,OAAOT,MAAQc,EAAME,QAAQhB,KAClDiB,GACHH,EAAML,OAAOP,QAAUY,EAAME,QAAQd,OAExC,OACE,UAAC,EAAD,YACE,SAAC,EAAD,CAAOF,KAAK,OAAZ,SACG,gBAAGkB,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaC,UAAWJ,EAAayC,GAAI,EAAzC,WACE,SAAC,IAAD,UAAW,UACX,UAAC,IAAD,YACE,SAAC,EAAAnC,GAAD,kBACMH,GADN,IAEEI,YAAY,aACZC,iBAAiB,cAEnB,SAAC,IAAD,CAAkBC,cAAc,OAAhC,UACE,SAAC,IAAD,CAAMC,GAAIC,EAAAA,IAAQ+B,MAAM,oBAV/B,KAgBH,SAAC,EAAD,CAAczD,KAAK,OAAO2B,UAAU,SACpC,SAAC,EAAD,CAAO3B,KAAK,SAAZ,SACG,gBAAGkB,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaC,UAAWF,EAAxB,WACE,SAAC,IAAD,UAAW,YACX,UAAC,IAAD,YACE,SAAC,EAAAI,GAAD,kBACMH,GADN,IAEEK,iBAAiB,UACjBD,YAAY,eACZM,KAAK,UAEP,SAAC,IAAD,CAAkBJ,cAAc,OAAhC,UACE,SAAC,IAAD,CAAMC,GAAII,EAAAA,IAAa4B,MAAM,oBAXpC,KAiBH,SAAC,EAAD,CAAczD,KAAK,SAAS2B,UAAU,SACtC,SAAC,IAAD,CACEG,UAAU,SAAC,MAAD,IACVC,GAAI,EACJC,gBAAgB,UAChBC,YAAY,QACZyB,UAAW5C,EAAM6C,aACjB/B,KAAK,SANP,SAOC,qBAKN,WAMZ,ECnHYgC,GAAc,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACtC,GAA4BC,EAAAA,EAAAA,UAAS,CAAC,GAAtC,eAAOtB,EAAP,KAAeuB,EAAf,KASA,OACE,SAAC9B,EAAD,UACG2B,EAASI,KAAI,SAAAzB,GACZ,IAAM0B,EAAczB,EAAOD,EAAQ7B,MAAO,EAC1C,OACE,UAACwB,EAAD,YACE,UAACC,EAAD,YACE,SAAC,MAAD,IACCI,EAAQxC,KAAK,QAEhB,UAACqC,EAAD,YACE,SAAC,MAAD,IACCG,EAAQtC,WAEX,UAAC,IAAD,CACEiE,KAAM,CAAEf,KAAM,KAAMC,GAAI,MACxBe,YAAU,EACVC,QAAQ,QAHV,WAKE,SAAC,IAAD,CACEpC,YAAY,OACZqC,MAAM,SAAC,MAAD,CAAab,MAAM,UACzBc,QAAS,kBA7BJC,EA6BqBhC,EAAQ7B,QA5B9CqD,GAAU,SAAAS,GAAU,yBAAUA,GAAV,cAAuBD,GAAY,GAAnC,IADH,IAAAA,CA6BI,KAEX,SAAC,IAAD,CACEvC,YAAY,MACZqC,MAAM,SAAC,MAAD,IACNC,QAAS,kBAAMT,EAAStB,EAAQ7B,GAAvB,QAGb,SAAC4B,GAAD,CACEC,QAASA,EACTC,OAAQyB,EACRxB,QAAS,kBApCD8B,EAoCmBhC,EAAQ7B,QAnC7CqD,GAAU,SAAAS,GAAU,yBAAUA,GAAV,cAAuBD,GAAY,GAAnC,IADF,IAAAA,CAoCC,MA5BFhC,EAAQ7B,GAgCtB,KAGN,ECjDY+D,GAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,cAC/B,OACE,UAAC,KAAD,YACE,SAAC,IAAD,UAAW,2BACX,UAAC,IAAD,YACE,SAAC,EAAAvD,EAAD,CACEE,iBAAiB,UACjBK,KAAK,OACL5B,KAAK,SACL6E,MAAOF,EACPG,SAAUF,EACVtD,YAAY,gBAEd,SAAC,IAAD,CAAkBE,cAAc,OAAhC,UACE,SAAC,IAAD,CAAMC,GAAIC,EAAAA,aAKnB,E,iCC5BYqD,GAAQvF,EAAAA,GAAAA,GAAH,iEAILwF,GAAcxF,EAAAA,GAAAA,IAAH,mFCgFxB,GAlEiB,WACf,IAAMqE,GAAWoB,EAAAA,GAAAA,IAAYC,GAAAA,IACvBxB,GAAYuB,EAAAA,GAAAA,IAAYE,GAAAA,IACxBR,GAASM,EAAAA,GAAAA,IAAYG,GAAAA,IACrBC,GAAQJ,EAAAA,GAAAA,IAAYK,GAAAA,IAEpB3C,GAAWC,EAAAA,GAAAA,OAEjB2C,EAAAA,EAAAA,YAAU,WACR5C,GAAS6C,EAAAA,GAAAA,MACV,GAAE,CAAC7C,IA2BJ,OACE,iCACE,UAACqC,GAAD,YACE,SAACD,GAAD,UAAO,eACP,SAAC3E,EAAD,CAAaC,MA7BE,SAAAoF,GAEjB5B,EAAS6B,MACP,SAAAlD,GAAO,OAAIA,EAAQxC,KAAK2F,gBAAkBF,EAAWzF,KAAK2F,aAAnD,IAGTC,MAAM,GAAD,OAAIH,EAAWzF,KAAf,4BAEL2C,GAASkD,EAAAA,GAAAA,IAAWJ,GAEvB,QAqBG,UAACT,GAAD,YACE,2BACuB,IAApBnB,EAASiC,SAAgB,SAACf,GAAD,UAAO,aAChClB,EAASiC,OAAS,IACjB,SAACpB,GAAD,CAAQC,OAAQA,EAAQC,cApBZ,SAAAmB,GACpBpD,GAASqD,EAAAA,GAAAA,GAAUD,EAAEE,cAAcpB,OACpC,QAqBK,2BACGnB,GACC,SAACwC,GAAA,EAAD,KAEA,SAACtC,GAAD,CACEC,SAvBeA,EAASc,QAAO,SAAAnC,GAAO,OAC9CA,EAAQxC,KAAK2F,cAAcQ,SAASxB,EAAOgB,cADG,IAwBtC7B,SAjCY,SAAAnD,GACtBgC,GAASyD,EAAAA,GAAAA,IAAczF,GACxB,IAkCQ0E,IAAS,uBAAG,iDAKtB,C","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactModalWindow/ContactModalWindow.styled.js","components/ContactModalWindow/ContactModalWindow.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts.styled.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  ErrorMessage as FormikErrorMessage,\n  Field as FormikInput,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  max-width: 500px;\n  padding: 20px;\n  border: 1px solid black;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: auto;\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 12px;\n  color: red;\n`;\n\nexport const Field = styled(FormikInput)`\n  box-sizing: border-box;\n\n  padding: 5px 20px;\n  font-size: 20px;\n  line-height: 1.5;\n\n  border-radius: 8px;\n`;\n","import { Formik, Field } from 'formik';\nimport { Form, ErrorMessage } from './ContactForm.styled';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Icon,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { FiUser } from 'react-icons/fi';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport { BsTelephone } from 'react-icons/bs';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Required field!'),\n  number: Yup.number().positive('Must be > 0!').required('Required field!'),\n});\n\nexport const ContactForm = ({ onAdd }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={FormSchema}\n      onSubmit={(values, actions) => {\n        onAdd({ ...values, id: nanoid() });\n        actions.resetForm();\n      }}\n    >\n      {props => {\n        const isErrorName = !props.values.name && props.touched.name;\n        const isErrorNumber = !props.values.number && props.touched.number;\n\n        return (\n          <Form>\n            <Field name=\"name\">\n              {({ field }) => (\n                <FormControl isInvalid={isErrorName} isRequired>\n                  <FormLabel>Name</FormLabel>\n                  <InputGroup>\n                    <Input\n                      {...field}\n                      placeholder=\"Enter name\"\n                      focusBorderColor=\"#239b56\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={FiUser} />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessage name=\"name\" component=\"span\" />\n            <Field name=\"number\">\n              {({ field }) => (\n                <FormControl isInvalid={isErrorNumber} isRequired>\n                  <FormLabel>Number</FormLabel>\n                  <InputGroup>\n                    <Input\n                      {...field}\n                      focusBorderColor=\"#239b56\"\n                      placeholder=\"Enter number\"\n                      type=\"tel\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={BsTelephone} />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessage name=\"number\" component=\"span\" />\n            <Button\n              leftIcon={<AiOutlineUserAdd />}\n              mt={4}\n              backgroundColor=\"#239b56\"\n              colorScheme=\"green\"\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: auto;\n  list-style: none;\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  border-radius: 8px;\n  background-color: #e2e2e2;\n`;\n\nexport const ContactName = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 12px;\n  font-weight: 500;\n  @media screen and (min-width: 480px) {\n    font-weight: 700;\n    font-size: 16px;\n  }\n`;\n\nexport const ContactNumber = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 12px;\n  font-weight: 500;\n  @media screen and (min-width: 480px) {\n    font-weight: 700;\n    font-size: 16px;\n  }\n`;\n","import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikInput,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 12px;\n  color: red;\n`;\n\nexport const Form = styled(FormikForm)`\n  position: relative;\n  margin: auto;\n\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 20px 40px;\n\n  background-color: white;\n  border-radius: 8px;\n`;\n\nexport const Field = styled(FormikInput)`\n  box-sizing: border-box;\n\n  padding: 5px 20px;\n  font-size: 20px;\n  line-height: 1.5;\n\n  border-radius: 8px;\n`;\n","import { Form, Field, ErrorMessage } from './ContactModalWindow.styled';\nimport PropTypes from 'prop-types';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Icon,\n  InputLeftElement,\n  FormControl,\n  FormLabel,\n  InputGroup,\n  Input,\n} from '@chakra-ui/react';\nimport { FiUser } from 'react-icons/fi';\nimport { BsTelephone } from 'react-icons/bs';\nimport { Button } from '@chakra-ui/button';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport { Formik } from 'formik';\nimport { editContact } from 'redux/contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Required field!'),\n  number: Yup.number().required('Required field!'),\n});\n\nexport const ContactModalWindow = ({ contact, isOpen, onClose }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Modal\n      closeOnOverlayClick={false}\n      isCentered\n      isOpen={isOpen}\n      onClose={onClose}\n      motionPreset=\"slideInBottom\"\n    >\n      <ModalOverlay bg=\"none\" backdropFilter=\"auto\" backdropBlur=\"3px\" />\n      <ModalContent w={{ base: '320px', md: '400px' }}>\n        <ModalHeader p={'10px 15px 0px 15px'}>Edit Contact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody p={'8px 15px 8px 15px'}>\n          <Formik\n            initialValues={{\n              name: contact.name,\n              number: contact.number,\n            }}\n            validationSchema={FormSchema}\n            onSubmit={(values, actions) => {\n              dispatch(\n                editContact({\n                  id: contact.id,\n                  name: values.name,\n                  number: values.number,\n                })\n              );\n              actions.resetForm();\n            }}\n          >\n            {props => {\n              const isErrorName = !props.values.name && props.touched.name;\n              const isErrorNumber =\n                !props.values.number && props.touched.number;\n\n              return (\n                <Form>\n                  <Field name=\"name\">\n                    {({ field }) => (\n                      <FormControl isInvalid={isErrorName} mb={3}>\n                        <FormLabel>Name</FormLabel>\n                        <InputGroup>\n                          <Input\n                            {...field}\n                            placeholder=\"Enter name\"\n                            focusBorderColor=\"#239b56\"\n                          />\n                          <InputLeftElement pointerEvents=\"none\">\n                            <Icon as={FiUser} color=\"grey.800\" />\n                          </InputLeftElement>\n                        </InputGroup>\n                      </FormControl>\n                    )}\n                  </Field>\n                  <ErrorMessage name=\"name\" component=\"div\" />\n                  <Field name=\"number\">\n                    {({ field }) => (\n                      <FormControl isInvalid={isErrorNumber}>\n                        <FormLabel>Number</FormLabel>\n                        <InputGroup>\n                          <Input\n                            {...field}\n                            focusBorderColor=\"#239b56\"\n                            placeholder=\"Enter number\"\n                            type=\"tel\"\n                          />\n                          <InputLeftElement pointerEvents=\"none\">\n                            <Icon as={BsTelephone} color=\"grey.800\" />\n                          </InputLeftElement>\n                        </InputGroup>\n                      </FormControl>\n                    )}\n                  </Field>\n                  <ErrorMessage name=\"number\" component=\"div\" />\n                  <Button\n                    leftIcon={<AiOutlineUserAdd />}\n                    mt={4}\n                    backgroundColor=\"#239b56\"\n                    colorScheme=\"green\"\n                    isLoading={props.isSubmitting}\n                    type=\"submit\"\n                  >\n                    Change contact\n                  </Button>\n                </Form>\n              );\n            }}\n          </Formik>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nContactModalWindow.propTypes = {\n  contact: PropTypes.object.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { RiDeleteBin2Line } from 'react-icons/ri';\nimport { List, Item, ContactName, ContactNumber } from './ContactList.styled';\nimport { FiUser } from 'react-icons/fi';\nimport { BsTelephone } from 'react-icons/bs';\nimport { GrConfigure } from 'react-icons/gr';\nimport { ButtonGroup, IconButton } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { ContactModalWindow } from 'components/ContactModalWindow/ContactModalWindow';\n\nexport const ContactList = ({ contacts, onDelete }) => {\n  const [isOpen, setIsOpen] = useState({});\n\n  const handleOpen = contactId => {\n    setIsOpen(prevIsOpen => ({ ...prevIsOpen, [contactId]: true }));\n  };\n\n  const handleClose = contactId => {\n    setIsOpen(prevIsOpen => ({ ...prevIsOpen, [contactId]: false }));\n  };\n  return (\n    <List>\n      {contacts.map(contact => {\n        const isModalOpen = isOpen[contact.id] || false;\n        return (\n          <Item key={contact.id}>\n            <ContactName>\n              <FiUser />\n              {contact.name}:\n            </ContactName>\n            <ContactNumber>\n              <BsTelephone />\n              {contact.number}\n            </ContactNumber>\n            <ButtonGroup\n              size={{ base: 'sm', md: 'lg' }}\n              isAttached\n              variant=\"solid\"\n            >\n              <IconButton\n                colorScheme=\"blue\"\n                icon={<GrConfigure color=\"white\" />}\n                onClick={() => handleOpen(contact.id)}\n              />\n              <IconButton\n                colorScheme=\"red\"\n                icon={<RiDeleteBin2Line />}\n                onClick={() => onDelete(contact.id)}\n              />\n            </ButtonGroup>\n            <ContactModalWindow\n              contact={contact}\n              isOpen={isModalOpen}\n              onClose={() => handleClose(contact.id)}\n            />\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import {\n  FormControl,\n  FormLabel,\n  Icon,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\nimport { FiUser } from 'react-icons/fi';\n\nexport const Filter = ({ filter, onChangeInput }) => {\n  return (\n    <FormControl>\n      <FormLabel>Find contacts by name</FormLabel>\n      <InputGroup>\n        <Input\n          focusBorderColor=\"#239b56\"\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={onChangeInput}\n          placeholder=\"Enter name\"\n        />\n        <InputLeftElement pointerEvents=\"none\">\n          <Icon as={FiUser} />\n        </InputLeftElement>\n      </InputGroup>\n    </FormControl>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChangeInput: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n`;\nexport const DivContacts = styled.div`\n  display: flex;\n  gap: 12px;\n  flex-direction: column;\n`;\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Loader } from '../components/Loader/Loader';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from 'redux/contacts/contactsOperations';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n  selectStatusFilter,\n} from 'redux/contacts/ContactsSelectors';\nimport { Title, DivContacts } from './Contacts.styled';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const filter = useSelector(selectStatusFilter);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const doAddContact = newContact => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n  };\n  const doDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const onChangeInput = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  const filterNew = () => {\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n  return (\n    <>\n      <DivContacts>\n        <Title>Phonebook</Title>\n        <ContactForm onAdd={doAddContact} />\n      </DivContacts>\n      <DivContacts>\n        <div>\n          {contacts.length !== 0 && <Title>Contacts</Title>}\n          {contacts.length > 0 && (\n            <Filter filter={filter} onChangeInput={onChangeInput}></Filter>\n          )}\n        </div>\n        <div>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <ContactList\n              contacts={filterNew()}\n              onDelete={doDeleteContact}\n            ></ContactList>\n          )}\n          {error && <p>Oops, something wrong is going on...</p>}\n        </div>\n      </DivContacts>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","ErrorMessage","FormikErrorMessage","FormikInput","FormSchema","Yup","shape","name","required","number","positive","ContactForm","onAdd","initialValues","validationSchema","onSubmit","values","actions","id","nanoid","resetForm","props","isErrorName","touched","isErrorNumber","field","isInvalid","isRequired","I","placeholder","focusBorderColor","pointerEvents","as","FiUser","component","type","BsTelephone","leftIcon","mt","backgroundColor","colorScheme","List","Item","ContactName","ContactNumber","Field","ContactModalWindow","contact","isOpen","onClose","dispatch","useDispatch","closeOnOverlayClick","isCentered","motionPreset","bg","backdropFilter","backdropBlur","w","base","md","p","editContact","mb","color","isLoading","isSubmitting","ContactList","contacts","onDelete","useState","setIsOpen","map","isModalOpen","size","isAttached","variant","icon","onClick","contactId","prevIsOpen","Filter","filter","onChangeInput","value","onChange","Title","DivContacts","useSelector","selectContacts","selectIsLoading","selectStatusFilter","error","selectError","useEffect","fetchContacts","newContact","some","toLowerCase","alert","addContact","length","e","setFilter","currentTarget","Loader","includes","deleteContact"],"sourceRoot":""}