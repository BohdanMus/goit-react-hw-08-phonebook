{"version":3,"file":"static/js/881.e005db61.chunk.js","mappings":"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","sources":["components/RefreshLoader/RefreshLoader.js","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.js","pages/Register.styled.js","pages/Register.js"],"sourcesContent":["import { Grid } from 'react-loader-spinner';\n\nexport const PageLoader = () => {\n  return (\n    <Grid\n      height=\"200\"\n      width=\"200\"\n      color=\"#4fa94d\"\n      ariaLabel=\"grid-loading\"\n      radius=\"12.5\"\n      wrapperStyle={{\n        marginTop: '200px',\n        marginRight: 'auto',\n        marginLeft: 'auto',\n        display: 'block',\n        width: '200px',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikErrorMessage } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 20px;\n  border: 1px solid black;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: 12px auto;\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 12px;\n  color: red;\n`;\n","import { useAuth } from 'hooks';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\nimport { ErrorMessage, Form } from './RegisterForm.styled';\nimport { Field, Formik } from 'formik';\nimport { PageLoader } from 'components/RefreshLoader/RefreshLoader';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  InputLeftElement,\n  InputGroup,\n  Icon,\n  InputRightElement,\n  IconButton,\n  Button,\n} from '@chakra-ui/react';\n\nimport { FiUser } from 'react-icons/fi';\nimport { HiOutlinePencilSquare } from 'react-icons/hi2';\nimport { BiShow, BiHide } from 'react-icons/bi';\nimport { Si1Password } from 'react-icons/si';\nimport { GoMail } from 'react-icons/go';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.mixed().required('Required field!'),\n  email: Yup.string().email().required('Required field!'),\n  password: Yup.string().min(7).required('Required field!'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useAuth();\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n\n  return (\n    <>\n      {isLoading ? (\n        <PageLoader />\n      ) : (\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          validationSchema={FormSchema}\n          onSubmit={(values, actions) => {\n            dispatch(\n              register({\n                name: values.name,\n                email: values.email,\n                password: values.password,\n              })\n            );\n            actions.resetForm();\n          }}\n        >\n          {props => {\n            const isErrorName = !props.values.name && props.touched.name;\n            const isErrorEmail = !props.values.email && props.touched.email;\n            const isErrorPassword =\n              !props.values.password && props.touched.password;\n            return (\n              <Form>\n                <Field name=\"name\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorName} mb={3}>\n                      <FormLabel>Name</FormLabel>\n                      <InputGroup>\n                        <Input\n                          {...field}\n                          focusBorderColor=\"#239b56\"\n                          placeholder=\"Enter name\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={FiUser} color=\"grey.800\" />\n                        </InputLeftElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessage name=\"name\" component=\"span\" />\n                <Field name=\"email\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorEmail} mb={3}>\n                      <FormLabel>Email</FormLabel>\n                      <InputGroup>\n                        <Input\n                          {...field}\n                          focusBorderColor=\"#239b56\"\n                          placeholder=\"Enter email\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={GoMail} color=\"grey.800\" />\n                        </InputLeftElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessage name=\"email\" component=\"span\" />\n                <Field name=\"password\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorPassword}>\n                      <FormLabel>Password</FormLabel>\n                      <InputGroup size=\"md\">\n                        <Input\n                          {...field}\n                          focusBorderColor=\"#239b56\"\n                          pr=\"4.5rem\"\n                          type={show ? 'text' : 'password'}\n                          placeholder=\"Enter password\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={Si1Password} color=\"grey.800\" />\n                        </InputLeftElement>\n                        <InputRightElement width=\"4.5rem\">\n                          {show ? (\n                            <IconButton\n                              h=\"1.75rem\"\n                              size=\"lg\"\n                              variant=\"ghost\"\n                              icon={<BiShow />}\n                              onClick={handleClick}\n                            ></IconButton>\n                          ) : (\n                            <IconButton\n                              h=\"1.75rem\"\n                              size=\"lg\"\n                              variant=\"ghost\"\n                              icon={<BiHide />}\n                              onClick={handleClick}\n                            ></IconButton>\n                          )}\n                        </InputRightElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessage name=\"password\" component=\"span\" />\n                <Button\n                  leftIcon={<HiOutlinePencilSquare />}\n                  mt={4}\n                  backgroundColor=\"#239b56\"\n                  colorScheme=\"green\"\n                  isLoading={props.isSubmitting}\n                  type=\"submit\"\n                >\n                  Sign up\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  @media screen and (min-width: 320px) and (max-width: 767px) {\n    font-size: 20px;\n  }\n`;\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Title } from './Register.styled';\n\nexport default function Register() {\n  return (\n    <div>\n      <Title>Register</Title>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["PageLoader","height","width","color","ariaLabel","radius","wrapperStyle","marginTop","marginRight","marginLeft","display","wrapperClass","visible","Form","styled","FormikForm","ErrorMessage","FormikErrorMessage","FormSchema","Yup","shape","name","required","email","password","min","RegisterForm","dispatch","useDispatch","isLoading","useAuth","useState","show","setShow","handleClick","initialValues","validationSchema","onSubmit","values","actions","register","resetForm","props","isErrorName","touched","isErrorEmail","isErrorPassword","field","isRequired","isInvalid","mb","I","focusBorderColor","placeholder","pointerEvents","as","FiUser","component","GoMail","size","pr","type","Si1Password","h","variant","icon","onClick","leftIcon","mt","backgroundColor","colorScheme","isSubmitting","Title","Register"],"sourceRoot":""}