{"version":3,"file":"static/js/879.f55e1890.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikErrorMessage } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 20px;\n  border: 1px solid black;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: auto;\n  @media screen and (min-width: 480px) {\n    /* width: 400px; */\n  }\n`;\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 12px;\n  color: red;\n`;\n","import { Formik, Field } from 'formik';\nimport { Form, ErrorMessage } from './ContactForm.styled';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Icon,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { FiUser } from 'react-icons/fi';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport { BsTelephone } from 'react-icons/bs';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Required field!'),\n  number: Yup.number().positive('Must be > 0!').required('Required field!'),\n});\n\nexport const ContactForm = ({ onAdd }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={FormSchema}\n      onSubmit={(values, actions) => {\n        onAdd({ ...values, id: nanoid() });\n        actions.resetForm();\n      }}\n    >\n      {props => {\n        const isErrorName = !props.values.name && props.touched.name;\n        const isErrorNumber = !props.values.number && props.touched.number;\n\n        return (\n          <Form>\n            <Field name=\"name\">\n              {({ field }) => (\n                <FormControl isInvalid={isErrorName} isRequired>\n                  <FormLabel>Name</FormLabel>\n                  <InputGroup>\n                    <Input\n                      {...field}\n                      placeholder=\"Enter name\"\n                      focusBorderColor=\"#239b56\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={FiUser} />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessage name=\"name\" component=\"div\" />\n            <Field name=\"number\">\n              {({ field }) => (\n                <FormControl isInvalid={isErrorNumber} isRequired>\n                  <FormLabel>Number</FormLabel>\n                  <InputGroup>\n                    <Input\n                      {...field}\n                      focusBorderColor=\"#239b56\"\n                      placeholder=\"Enter number\"\n                      type=\"tel\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={BsTelephone} />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessage name=\"number\" component=\"div\" />\n            <Button\n              leftIcon={<AiOutlineUserAdd />}\n              mt={4}\n              backgroundColor=\"#239b56\"\n              colorScheme=\"green\"\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 400px;\n  padding: 20px;\n  border: 1px solid black;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: auto;\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  border-radius: 8px;\n  background-color: #e2e2e2;\n`;\n\nexport const ContactName = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-weight: 700;\n`;\nexport const ContactNumber = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\nimport { RiDeleteBin2Line } from 'react-icons/ri';\nimport { List, Item, ContactName, ContactNumber } from './ContactList.styled';\nimport { FiUser } from 'react-icons/fi';\nimport { BsTelephone } from 'react-icons/bs';\nimport { IconButton } from '@chakra-ui/react';\n\nexport const ContactList = ({ contacts, onDelete }) => {\n  return (\n    <List>\n      {contacts.map(contact => {\n        return (\n          <Item key={contact.id}>\n            <ContactName>\n              <FiUser />\n              {contact.name}:\n            </ContactName>\n            <ContactNumber>\n              <BsTelephone />\n              {contact.number}\n            </ContactNumber>\n            <IconButton\n              colorScheme=\"red\"\n              icon={<RiDeleteBin2Line />}\n              onClick={() => onDelete(contact.id)}\n            />\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import {\n  FormControl,\n  FormLabel,\n  Icon,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\nimport { FiUser } from 'react-icons/fi';\n\nexport const Filter = ({ filter, onChangeInput }) => {\n  return (\n    <div>\n      <FormControl>\n        <FormLabel>Find contacts by name</FormLabel>\n        <InputGroup>\n          <Input\n            // width={'300px'}\n            focusBorderColor=\"#239b56\"\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={onChangeInput}\n            placeholder=\"Enter name\"\n          />\n          <InputLeftElement pointerEvents=\"none\">\n            <Icon as={FiUser} />\n          </InputLeftElement>\n        </InputGroup>\n      </FormControl>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChangeInput: PropTypes.func.isRequired,\n};\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Loader } from '../components/Loader/Loader';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from 'redux/contacts/contactsOperations';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n  selectStatusFilter,\n} from 'redux/contacts/ContactsSelectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const filter = useSelector(selectStatusFilter);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const doAddContact = newContact => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n  };\n  const doDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const onChangeInput = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  const filterNew = () => {\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n  return (\n    <>\n      <div>\n        <h2\n          style={{\n            fontSize: 24,\n          }}\n        >\n          Phonebook\n        </h2>\n        <ContactForm onAdd={doAddContact} />\n      </div>\n      <div>\n        <h2\n          style={{\n            fontSize: 24,\n          }}\n        >\n          Contacts\n        </h2>\n        <div>\n          <Filter filter={filter} onChangeInput={onChangeInput} />\n        </div>\n        <div>\n          {isLoading && <Loader />}\n          {error && <p>Oops, something wrong is going on...</p>}\n          <ContactList contacts={filterNew()} onDelete={doDeleteContact} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","ErrorMessage","FormikErrorMessage","FormSchema","Yup","shape","name","required","number","positive","ContactForm","onAdd","initialValues","validationSchema","onSubmit","values","actions","id","nanoid","resetForm","props","isErrorName","touched","isErrorNumber","field","isInvalid","isRequired","I","placeholder","focusBorderColor","pointerEvents","as","FiUser","component","type","BsTelephone","leftIcon","mt","backgroundColor","colorScheme","List","Item","ContactName","ContactNumber","ContactList","contacts","onDelete","map","contact","icon","onClick","Filter","filter","onChangeInput","value","onChange","useSelector","selectContacts","isLoading","selectIsLoading","selectStatusFilter","error","selectError","dispatch","useDispatch","useEffect","fetchContacts","style","fontSize","newContact","some","toLowerCase","alert","addContact","e","setFilter","currentTarget","Loader","includes","deleteContact"],"sourceRoot":""}